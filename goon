mobb someMobb12 wqlr;

someMobb12 [6567443865744583684695436559-last]; *| number-wqlr:mobb |*
*| 1, 2, someMobb1, last |*

wqlr: weaqlar
vqlr: veaqlar

"ncnnncnccncncncncncncncncncncnnncnccccncnccncncncncnccn" + "cnncnncncncnncncc"
vqlr"hello world!" + "I am here."

someMobb12 figo wqlr:figure|mobb-vqlr:figure|mobb-*:mobb| teller, report;

==== ==== ==== ====

	

**	"vqWq: :hello world!"

	someMobb12 someMobb23/ idnt| teller, report, mobb;

	someMobb12 crdn| teller, report, mobb;

==== ==== ==== ====

someMobb12 appn wqlr:figure|mobb-vqlr:figure|mobb| teller, report;

someMobb12 ftch| teller, report, mobb;

someMobb12 clne| teller, report, mobb;

someMobb12 erse| teller, report;

#### 1: This should be some algorithm step. #
.... some instruction ....

#### 2: This should be some algorithm step. #
.... some instruction ....
#### 2 #
#### 1 #

someMobb12 prss| teller, report;
*| except: itrn |*

someMobb12 exst| teller, report, mob;

==== ==== ==== ====

	*| This is some note we can use to do a lot of things. |*

	inst name someName12;
	*| someName12.yeld.crdn |*
	*| someName12.yeld.1 |*
	*| someName12.yeld.1.fgrn: wqlr |*
	*| someName12.yeld.1.type: vqlr |*
	*| someName12.yeld.someMobb12.type: vqlr |*
	*| number-wqlr:mob |*

	.... some instruction ....;
	[
		.... some instruction ....;
		.... some instruction ....;
		.... some instruction ....;
		.... some instruction ....;
	]

**	bfre: .... x ....;
**	@someBbfrMob

==== ==== ==== ====

[
	.... x ....;
	.... x ....;

	] cond wqlr:figure|mobb:
*| base |*
*| Must be 'c', to get activated. |*

{
	wqlr:figure|mobb: .... x ....;
	wqlr:figure|mobb: .... x ....;
	wqlr:figure|mobb: .... x ....;
	wqlr:figure|mobb: .... x ....;
	rsrt: .... x ....;
	
	} slct wqlr:figure|mobb;
*| id |*

[
	.... x ....;
	*| brak |*
	itrn

	] vrbl [
		.... x ....;
	];

[
	.... x ....;
	*| brak |*
	itrn

	] rptv number-wqlr:mobb-endl;
	*| 1-someMobb12-endl |*
