mobb someMobb12 wqlr;

wqlr: weaqlar
vqlr: veaqlar

"ncnnncnccncncncncncncncncncncnnncnccccncnccncncncncnccn" + "cnncnncncncnncnccncncncncncc"
vqlr"hello world!" + "I am here."

someMobb12 insr wqlr:figure|mobb-vqlr:figure|mobb-*:mobb number-wqlr:mob;

	someMobb12 [x-x] *| 1, 2, 0, someMobb12 |*
	*| 8 spaces |*

	mobb/fig[o] ftch| mobb;

	inst name someName12;

	*| This is some note we can use to do a lot of things. |*
	
	*| meta yield |*
	*| someName12.tllr: wqlr |*
	*| someName12.rprt: vqlr |*
	*| someName12.crdn: wqlr |*	

	*| instruction yield |*

	*| someName12.1 |* *| number-wqlr:mob |*
	*| someName12.1.fgrn: wqlr |*
	*| someName12.1.type: vqlr |*
	*| someName12.someMobb12.fgrn: wqlr |*

	mobb/fig[o] clne| mobb;

==== ==== ==== ====

**	"vqWq: :hello world!"

	mobb/fig[o] mobb/fig[o] idnt|mobb;

	someMobb12 crdn|mobb;

==== ==== ==== ====

mobb/fig[o] erse;

	#### 1: This should be some algorithm step. #
	.... some instruction ....

	#### 2: This should be some algorithm step. #
	.... some instruction ....
	#### 2 #
	#### 1 #

==== ==== ==== ====

	instruction/set
		........ some instruction ........;
		[
			.... some instruction ....;
			.... some instruction ....;
			.... some instruction ....;
			.... some instruction ....;
		]

**		bfre: .... x ....;
**		@someBbfrMob


	instruction/set< cond wqlr:figure|mobb;
		*| base |*
		*| Must be 'c', to get activated. |*

	{
		wqlr:figure|mobb: .... x ....;
		wqlr:figure|mobb: .... x ....;
		wqlr:figure|mobb: .... x ....;
		wqlr:figure|mobb: .... x ....;
		rsrt: .... x ....;?
	
		} slct wqlr:figure|mobb;
		*| id |*

	instruction/set< vrbl instruction/set;
		*| brak |*
		*| iteration seed |*
		itrn
		someMobb12 prss; *| except: seed & yield |*
	someMobb12 exst| mob;

	instruction/set> rptv number-wqlr:mobb;
