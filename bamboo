mobb / crte someMobb12 wqlr:figure|mobb-vqlr:figure|mobb-*:mobb| teller, report;

wqlr: weaqlar
vqlr: veaqlar

"wqlr: :cnnccccncnccncncncncnccn" + "cnncnncncncnncncc"
"vqlr: :hello world!"

mobb someMobb12 / fgre wqlr:figure|mobb-vqlr:figure|mobb-*:mobb| teller, report;

==== ==== ==== ====

	mobb someMobb12 [61567443865744583684695436559-last]; *| wqlr:figure|mobb |*

	"vqWq: :hello world!"

	mobb someMobb12 someMobb23 / idnt| teller, report, mobb;

	mobb someMobb12 / crdn| teller, report, mobb;

==== ==== ==== ====

mobb someMobb12 / appn wqlr:figure|mobb-vqlr:figure|mobb| teller, report;

mobb someMobb12 / prvd [{1}-{last}] *| number-wqlr:mobb |* [copy]| teller, report, mobb;

mobb someMobb12 / clne| teller, report, mobb;

#### 1: This should be some algorithm step. #
.... some instruction ....

#### 2: This should be some algorithm step. #
.... some instruction ....
#### 2 #
#### 1 #

mobb someMobb12 / prss| teller, report;

mobb someMobb12 / exst| teller, report, mob;

==== ==== ==== ====

	*| This is some note we can use to do a lot of things. |*

	inst / name someName12;
	*| someName12.yeld.{1} |*
	*| someName12.yeld.{1}.fgrn: wqlr |*
	*| someName12.yeld.{1}.type: vqlr |*
	*| number-wqlr:mob |*

	.... some instruction ....;
	[
		instruction set
	]

**	<bBfr>: .... x ....;
**	@someBbfrMob

==== ==== ==== ====

cond wqlr:figure|mobb: .... x ....;
*| base |*

.... x ....;

slct wqlr:figure|mobb: {
	wqlr:figure|mobb: .... x ....;
	wqlr:figure|mobb: .... x ....;
	wqlr:figure|mobb: .... x ....;
	wqlr:figure|mobb: .... x ....;
	rsrt: .... x ....;
}

vrbl: [
	.... x ....;
	.... x ....;
	.... x ....;
	.... x ....;

	*| brak |*
	itrn
]: [
	*| brak |*
]

rptv number-wqlr:mobb-endl: [
	.... x ....;
	*| brak |*
	itrn
]
*| {1}-{someMobb12}-{endl} |*

