	wqlr: weaqlar
	vqlr: veaqlar

==== ==== ==== ====

mobb / crte someMobb12 weaqlar-mobbType| teller, report;

someMobb12 / exst| teller, report, mob;

someMobb12 / prss| teller, report;

#### 1: This should be some algorithm step. #
.... some instruction ....

#### 2: This should be some algorithm step. #
.... some instruction ....
#### 2 #
#### 1 #

someMobb12 / fgre 'nccccnncccnncccnncncnccnccnnccncccncnc'-someMobb12| teller, report;

someMobb12 / $add$ 'nnccncnnccnnccc'-someMobb12 someMobb12| teller, report;

someMobb12 / $crdn| teller, report, mob;

someMobb12 / $get$ 1-someMobb12-1:5-someMobb12:someMobb12 [copy]| teller, report, mob;

someMobb12 someMobb23 / $idnt| teller, report, mob;

someMobb12 / clne| teller, report, mob;

==== ==== ==== ====	

	inst / name someName12;
	*| someName12!yeld!1 |*


	.... some instruction ....;
	[
		instruction set
	]

**	<bBfr>: .... x ....;
**	@someBbfrMob

	*| This is some note we can use to do a lot of things. |*

==== ==== ==== ====

cond 'c'-someMobb12: .... x ....;
*| base |*
	
.... x ....;

slct 'c'-someMobb12: {
	'c'-someMobb12: .... x ....;
	'c'-someMobb12: .... x ....;
	'c'-someMobb12: .... x ....;
	'c'-someMobb12: .... x ....;
	rst: .... x ....;
}

vrbl: [
	.... x ....;
	.... x ....;
	.... x ....;
	.... x ....;
	itrn;
]: [
	*| brak |*
]

rptv '1'-someMobb12-endl: [
	.... x ....;
	*| brak |*
]
