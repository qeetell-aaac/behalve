mobb / crte someMobb12 wqlr:figure|mobb-vqlr:figure|mobb-*:mobb| teller, report;

wqlr: weaqlar
vqlr: veaqlar

"wqlr: :cnnccccncnccncncncncnccn" + "cnncnncncncnncncc"
"vqlr: :hello world!"

someMobb12 / fgre wqlr:figure|mobb-vqlr:figure|mobb-*:mobb| teller, report;

==== ==== ==== ====

	someMobb12 [6156744386574458356846954365259-last] *| wqlr:figure|mobb |*

	"vqWq: :hello world!"

	someMobb12 someMobb23 / idnt| teller, report, mobb;

	someMobb12 / crdn| teller, report, mobb;

==== ==== ==== ====

someMobb12 / appn wqlr:figure|mobb-vqlr:figure|mobb| teller, report;

someMobb12 / prvd [1-last] *| wqlr:figure|mobb |* [copy]| teller, report, mobb;

someMobb12 / clne| teller, report, mobb;

#### 1: This should be some algorithm step. #
.... some instruction ....

#### 2: This should be some algorithm step. #
.... some instruction ....
#### 2 #
#### 1 #

someMobb12 / exst| teller, report, mob;

someMobb12 / prss| teller, report;

==== ==== ==== ====	

	inst / name someName12;
	*| someName12!yeld!1 |*


	.... some instruction ....;
	[
		instruction set
	]

**	<bBfr>: .... x ....;
**	@someBbfrMob

	*| This is some note we can use to do a lot of things. |*

==== ==== ==== ====

cond 'c'-someMobb12: .... x ....;
*| base |*
	
.... x ....;

slct 'c'-someMobb12: {
	'c'-someMobb12: .... x ....;
	'c'-someMobb12: .... x ....;
	'c'-someMobb12: .... x ....;
	'c'-someMobb12: .... x ....;
	rst: .... x ....;
}

vrbl: [
	.... x ....;
	.... x ....;
	.... x ....;
	.... x ....;
	itrn;
]: [
	*| brak |*
]

rptv '1'-someMobb12-endl: [
	.... x ....;
	*| brak |*
]
