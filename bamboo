mobb someMobb12 weaqlar| no of yields, teller, report code;
exst someMobb12| no of yields, mob;

someMobb12 / prss| no of yields, teller, report code;

#### 1: This should be some algorithm step. #
.... some instruction ....

#### 2: This should be some algorithm step. #
.... some instruction ....
#### 2 #
#### 1 #

m

	weaqlar

	someMobb12 / fgre 'ncnncccnncccnncncnccnccnnccncccncnc'-someMobb12| no of yields, teller,
		report code;
		
		someMobb12 / $add$ 'nnccncnnccnnccc'-someMobb12 someMobb12| no of yields, teller,
			report code;
		
		someMobb12 / $crdn| no of yields, teller, report code, mob;
		
		someMobb12 / $get$ 1-someMobb12-1:5-someMobb12:someMobb12 [gWCI]| no of yields,
			teller, report code, mob;
		*| gWCI: get without cutting it out |*

		someMobb12 someMobb23 / $idnt| no of yields, mob;

	==== ==== ==== ====

	someMobb12 / clne| no of yields, mob;

	lIns / name someName12;
	*| someName12#1 |*


	.... some instruction ....;
	[
		instruction set
	]

**	<bBfr>: .... x ....;
**	@someBbfrMob

	*| This is some note we can use to do a lot of things. |*

	==== ==== ==== ====

	if$$ 'c'-someMobb12: .... x ....;
	*| base |*
	
	.... x ....;

	slct 'c'-someMobb12: {
		'c'-someMobb12: .... x ....;
		'c'-someMobb12: .... x ....;
		'c'-someMobb12: .... x ....;
		'c'-someMobb12: .... x ....;
		lRsr: .... x ....;
	}

	eVrb: [
		.... x ....;
		.... x ....;
		.... x ....;
		.... x ....;
	]: [
		*| brak |*
	]

	itrn

	rpat 'c'-someMobb12-endl: [
		.... x ....;
		*| brak |*
	]

